:- [spell_auto_data].

%! spell_property(?Name:atomic, ?Field:atomic, ?Val)
%
%  Retrieve a specific Field from the spell_data/2 of the spell Name.
spell_property(Name, Field, Val) :-
    spell_data(Name, Data),
    Val = Data.get(Field).

%! spell_property_or_error(?Name:atomic, ?Prop:atomic, ?Val)
%
%  Like spell_property/3, but when the given field does not exist, it
%  throws an error instead of silently failing.
spell_property_or_error(Name, Prop, Val) :-
    spell_data(Name, Data),
    Val = Data.Prop.

%! spell_data(?Name:atomic, ?Data:dict)
%
%  Data is a dictionary with the following fields (optional fields in parens):
%  * casting_time: A string describing the time required to cast the spell.
%  * classes: List of classes (atoms) that can learn the spell.
%  * components: Subset of the set [`v`, `s`, `m(X)`], indicating
%      which components are required.
%  * desc: Textual description.
%  * duration: String describing the amount of time the effect lasts.
%  * higher_level: Atom `yes` or `no`, indicating whether the spell can be upcast.
%  * level: Spell level, as an integer.
%  * range: Description of the range of a spell. Some options are
%      `self`, `touch`, `feet(X)`, `miles(X)`.
%  * ritual: `yes` or `no`, depending on whether the spell can be cast as a ritual.
%  * school: The spell's school (as an atom).
%  * (damage_rolls): Information about the damage rolls performed by this spell.
%      The damage information is recorded as terms of the form `Cond: Type(Roll)`
%      where `Cond` is a condition that needs to be met to apply the roll, for
%      example `on_hit` (if the damage is done if a spell attack roll
%      hits), `Type` is the damage type (piercing, bludgeoning, fire,
%      ...), and `Roll` is a dice formula.
%  * (effects): Summary of effects, but not damage rolls.
spell_data(Name, Data) :-
    spell_auto_data(Name, AutoData),
    findall(Ext,
            (extend_spell_data(Name, Field, Val), Ext=add_dict_field(Field:Val)),
            Exts),
    sequence(Exts, AutoData, Data).
add_dict_field(Field:Val, Old, New) :-
    New = Old.put(Field,Val).

%! spell_auto_data(?Name:atomic, ?Data:dict)
%
%  Like spell_data/2, but less complete. This is the data that is
%  autogenerated from a JSON file, whereas spell_data/2 contains
%  further manual extensions. You probably want spell_data/2.

%! contains_attack_roll(+Effects, ?Roll)
%
%  Check whether Effects contains at least one attack roll.
contains_attack_roll(Effects, spell_attack_roll(Range):Effect) :-
    subterm_member(spell_attack_roll(Range):Effect, Effects).

%! contains_saving_throw(+Effects, ?ST)
%
%  Check whether Effects contains at least one saving throw.
contains_saving_throw(Effects, saving_throw(Abi):Effect) :-
    subterm_member(saving_throw(Abi):Effect, Effects).

%! unique_effects(+Effects, ?UniqueEffects)
%
%  Effects may contain terms of the form `N * Effect`, where `N` is a
%  natural number. For each such element in Effects, UniqueEffects
%  contains simply Effect.
unique_effects(Effects, UniqueEffects) :-
    maplist(just_once, Effects, UniqueEffects).
just_once(_*X, X).
just_once(X, X) :- X \= _*_.
    
%! extend_spell_data(+Name:atomic, ?Field:atomic, ?Val)
extend_spell_data(Name, effects, Effects) :-
    spell_auto_data(Name, _), % ground Name
    findall(Effect, add_spell_effect(Name, Effect), Effects).

%! add_spell_effect(?Name:atomic, ?Effect)
add_spell_effect('acid splash', "up to two targets within 5 ft of eachother").
add_spell_effect('acid splash', saving_throw(dex): damage(acid, N d 6)) :-
    cantrip_scale(N).

add_spell_effect('false life', 'temp hp' + (1 d 4 + 4)).

add_spell_effect(fireball,
                 in(20 ft sphere):
                  saving_throw(dex):
                   (damage(fire,8 d 6) else 'half damage')).

add_spell_effect('fire bolt',
                  spell_attack_roll(ranged):damage(fire, N d 10)) :-
    cantrip_scale(N).

%extend_spell_data('scorching ray', damage rolls, [on_hit: fire(2 d 6)]).
add_spell_effect('scorching ray',
                 3 * (spell_attack_roll(ranged):damage(fire, 2 d 6))).


